from _typeshed import Incomplete
from mudpuppy_core import AliasId, Event, EventHandlers as EventHandlers, EventType, MudLine, SessionId, TriggerId
from typing import Any, Awaitable, Callable

EventHandler = Callable[[Event], Awaitable[None]]
GmcpHandler = Callable[[SessionId, Any], Awaitable[None]]

def ensure_async(handler: Callable) -> None: ...
def on_event(event_type: EventType | list[EventType], module: Incomplete | None = None): ...
def on_gmcp(package: str, module: Incomplete | None = None): ...
def on_new_session(module: Incomplete | None = None): ...
def on_new_session_or_reload(module: Incomplete | None = None): ...
def on_connected(module: Incomplete | None = None): ...
def on_disconnected(module: Incomplete | None = None): ...
def on_mud_event(mud_name: str, event_type: EventType | list[EventType], module: Incomplete | None = None): ...
def on_mud_new_session(mud_name: str, module: Incomplete | None = None): ...
def on_mud_new_session_or_reload(mud_name: str, module: Incomplete | None = None): ...
def on_mud_connected(mud_name: str, module: Incomplete | None = None): ...
def on_mud_disconnected(mud_name: str, module: Incomplete | None = None): ...
AliasCallable = Callable[[SessionId, AliasId, str, Any], Awaitable[None]]

def alias(*, pattern: str, name: str, expansion: str | None = None, mud_name: str | None = None, module: str | None = None): ...
TriggerCallable = Callable[[SessionId, TriggerId, str, Any], Awaitable[None]]

def trigger(*, pattern: str, name: str, gag: bool = False, strip_ansi: bool = True, expansion: str | None = None, mud_name: str | None = None, module: str | None = None): ...
HighlightCallable = Callable[[SessionId, TriggerId, str, Any], MudLine]

def highlight(*, pattern: str, name: str, strip_ansi: bool = True, mud_name: str | None = None, module: str | None = None): ...
def timer(*, name: str, milliseconds: int = 0, seconds: int = 0, minutes: int = 0, hours: int = 0, max_ticks: int | None = None, mud_name: str | None = None, module: str | None = None): ...
def unload_handlers(module: str): ...
